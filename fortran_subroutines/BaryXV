      subroutine BaryXV (jday, pos, vel, ierr)

c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c This routine gives the position and velocity in ecliptic heliocentric
c reference frame of the Solar System barycenter at a given time. Uses
c PlanetXV.
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c
c J-M. Petit  Observatoire de Besancon
c Version 1 : February 2004
c
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c INPUT
c     jday  : Time of elements (Julian day) (R8)
c
c OUTPUT
c     pos   : Position vector (3*R8)
c     vel   : Velocity vector (3*R8)
c     ierr  : Error code (I4)
c                0 : nominal run
c               20 : jday out of range
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
Cf2py intent(in) jday
Cf2py intent(out) pos
Cf2py intent(out) vel
Cf2py intent(out) ierr

      implicit none

      real*8
     $  jday, pos(3), vel(3), Pi, TwoPi, jday_min,
     $  jday_max, drad, mu

      integer*4
     $  ind, ierr, n_planets, istat

      parameter
     $  (Pi = 3.141592653589793d0, TwoPi = 2.d0*Pi, drad = Pi/180.d0,
     $  jday_min = 2415020.0, jday_max = 2488070.0, n_planets = 8,
     $  mu = TwoPi**2)

      real*8
     $  pos_p(3), vel_p(3), masses(n_planets), msys, mp

      data masses /6023600.0d0,    ! Mercury
     $              408523.7d0,    ! Venus
     $              328900.56d0,   ! Earth + Moon
     $             3098708.0d0,    ! Mars
     $                1047.349d0,  ! Jupiter
     $                3497.898d0,  ! Saturn
     $               22902.98d0,   ! Uranus
     $               19412.24d0/   ! Neptune

      ierr = 0

c Jday out of range.
      if ((jday .lt. jday_min) .or. (jday .gt. jday_max)) then
         ierr = 20
         return
      end if

c Ok, do the math.
      pos(1) = 0.d0
      pos(2) = 0.d0
      pos(3) = 0.d0
      vel(1) = 0.d0
      vel(2) = 0.d0
      vel(3) = 0.d0
      msys = mu
      do ind = 1, n_planets
         call PlanetXV (ind, jday, pos_p, vel_p, istat)
         if (istat .ne. 0) then
            ierr = istat
            return
         end if
         mp = mu/masses(ind)
         msys = msys + mp
         pos(1) = pos(1) + mp*pos_p(1)
         pos(2) = pos(2) + mp*pos_p(2)
         pos(3) = pos(3) + mp*pos_p(3)
         vel(1) = vel(1) + mp*vel_p(1)
         vel(2) = vel(2) + mp*vel_p(2)
         vel(3) = vel(3) + mp*vel_p(3)
      end do
      pos(1) = pos(1)/msys
      pos(2) = pos(2)/msys
      pos(3) = pos(3)/msys
      vel(1) = vel(1)/msys
      vel(2) = vel(2)/msys
      vel(3) = vel(3)/msys

      return

      end

