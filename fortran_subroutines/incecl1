      subroutine incecl1 (inc, fe)

c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c This routine computes the ecliptic inclination distribution for a
c given inclination (given in radian):
c
c   f_e(i) = a exp{-i^2/(2 s_1^2)} + (1 - a) exp{-i^2/(2 s_2^2)}
c
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c
c J-M. Petit  Observatoire de Besancon
c Version 1 : April 2004
c
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c INPUT
c     inc   : inclination requested (radian) (R4)
c
c OUTPUT
c     fe    : ecliptic inclination distribution (R4)
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
Cf2py intent(in) inc
Cf2py intent(out) fe

      implicit none

      real*4
     $  Pi, TwoPi

      parameter
     $  (Pi = 3.14159265, TwoPi = 2.*Pi)

      real*4
     $  inc, fe, a, s1, s2, angle, t1, t2, t3

      common /c_distrib/ a, s1, s2

      angle = mod(inc, TwoPi)
      if (angle .gt. Pi) angle = angle - TwoPi
      t1 = 2.*s1**2
      t2 = 2.*s2**2
      t3 = -angle**2
      fe = a*exp(t3/t1) + (1. - a)*exp(t3/t2)

      return
      end

      real*4 function interp (x, y, val, n)

c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c This function computes linearly interpolates the function y(x) at
c value val.
c
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c
c J-M. Petit  Observatoire de Besancon
c Version 1 : October 2006
c
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c INPUT
c     x     : Abscissa of the function, sorted in ascending order (n*R4)
c     y     : Values of the function (n*R4)
c     val   : Value of x at which to interpolate (R4)
c     n     : Size of x and y arrays (I4)
c
c OUTPUT
c     interp: Interpolated value (R4)
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
Cf2py intent(in) n
Cf2py real*4 intent(in), depend(n) :: x
Cf2py real*4 intent(in), depend(n) :: y
Cf2py intent(in) val

      implicit none

      integer*4
     $  n, ilo, ihi, i

      real*4
     $  x(*), y(*), val

      if (val .le. x(1)) then
         interp = y(1)
      else if (val .ge. x(n)) then
         interp = y(n)
      else
         ilo = 1
         ihi = n
 1000    continue
         if (ihi - ilo .gt. 1) then
            i = (ihi + ilo)/2
            if (x(i) .lt. val) then
               ilo = i
            else if (x(i) .gt. val) then
               ihi = i
            else
               interp = y(i)
               return
            end if
            goto 1000
         end if
         interp = y(ilo) + (y(ihi) - y(ilo))*(val - x(ilo))
     $     /(x(ihi) - x(ilo))
      end if

      return
      end
