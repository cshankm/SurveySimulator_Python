      subroutine read_eff (filen, lun_in, bin, eff, ierr)

c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c This routine opens and reads in efficiency file.
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c
c J-M. Petit  Observatoire de Besancon
c Version 1 : February 2004
c
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
c INPUT
c     filen : object element file name
c     lun_in: File unit
c
c OUTPUT
c     bin   : Magnitude bin center (R8)
c     eff   : Efficiency for that bin (R8)
c     ierr  : Error code
c               -3 : moninal run with piecewise linear function
c               -2 : moninal run with double hyperbolic tangent
c               -1 : moninal run with single hyperbolic tangent
c                0 : nominal run with look-up table
c               10 : unable to open filen
c               20 : error reading record
c               30 : end of file reached
c
c COMMON /rate_cut/ r_min, r_max, ang, ang_w
c     r_min : Lower rate cut (R8)
c     r_max : Upper rate cut (R8)
c     ang   : Mean direction of motion (R8)
c     ang_w : Half-width of direction cone (R8)
c COMMON /track_frac/ track_mag, track_slope
c     track_mag   : intercept for magnitude dependent tracking fraction
c     track_slope : slope for magnitude dependent tracking fraction
c
c COMMON /mag_error/ mag_err
c     mag_err: Magnitude error parameters (4*R8)
c-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

      implicit none

      real*8
     $  pi, drad

      parameter
     $  (pi = 3.141592653589793d0, drad = pi/180.0d0)

      real*8
     $  bin, eff, r_min, r_max, ang, ang_w, mag_err(4),
     $  track_mag, track_slope

      integer
     $  lun_in, ierr, eff_type

      character
     $  line*100, filen*100

      logical
     $  opened

      common /rate_cut/ r_min, r_max, ang, ang_w
      common /track_frac/ track_mag, track_slope
      common /mag_error/ mag_err

      data opened /.false./, eff_type /0/

      save opened, eff_type

      ierr = 0
      if (.not. opened) then
         open (unit=lun_in, file=filen, status='old', err=1000)
         eff_type = 0
         r_min = 0.d0
         r_max = 100.d0
         ang = 0.d0
         ang_w = 3.1416d0
         mag_err(1) = -20.006d0
         mag_err(2) = 0.8047d0
         mag_err(3) = 0.d0
         mag_err(4) = 0.d0
         opened = .true.
      end if

 1500 continue
      read (lun_in, '(a)', err=2000, end=3000) line
      if (line(3:8) .eq. 'single') eff_type = -1
      if (line(3:8) .eq. 'double') eff_type = -2
      if (line(3:8) .eq. 'linear') eff_type = -3
      if (line(3:10) .eq. 'rate_cut') then
         read (line(12:), *) r_min, r_max, ang, ang_w
c Change rates to rad/day
         r_min = r_min*24.d0/3600.d0*drad
         r_max = r_max*24.d0/3600.d0*drad
c Change angles to radian
         ang = ang*drad
         ang_w = ang_w*drad
      end if
      if (line(3:12) .eq. 'track_frac') then
         read (line(14:), *) track_mag, track_slope
      end if
      if (line(3:11) .eq. 'mag_error') then
         read (line(13:), *) mag_err(1), mag_err(2), mag_err(3),
     $     mag_err(4)
      end if
      if (line(1:1) .eq. '#') goto 1500
      if (eff_type .lt. 0) then
         read (line, *, err=2000, end=3000) eff
      else
         read (line, *, err=2000, end=3000) bin, eff
      end if
      return

 1000 continue
      ierr = 10
      return

 2000 continue
      ierr = 20
      return

 3000 continue
      ierr = 30
      if (eff_type .ne. 0) ierr = eff_type
      close (lun_in)
      opened = .false.
      return

      end

c \subroutine{parse}

c D\'ecompose une ligne de commande en mots, en \'eliminant les
c blancs.

